{"version":3,"file":"static/js/67.d0d2570b.chunk.js","mappings":"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","sources":["components/Message.jsx","components/MovieList.jsx","components/Searchbar.jsx","pages/Movies.jsx","services/movies-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nfunction Message({ children }) {\n  return <b>{children}</b>;\n}\n\nMessage.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Message;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nfunction MovieList({ movies, path = '' }) {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`${path}${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  path: PropTypes.string,\n};\n\nexport default MovieList;\n","import PropTypes from 'prop-types';\n\nfunction Searchbar({ value, onChange }) {\n  return (\n    <>\n      <input\n        name=\"query\"\n        type=\"text\"\n        value={value}\n        onChange={e => {\n          onChange(e.target.value);\n        }}\n        placeholder=\"Search movies\"\n        autoComplete=\"off\"\n        autoFocus\n      />\n    </>\n  );\n}\n\nSearchbar.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n\n// initial\n// function Searchbar({ onSubmit }) {\n//   const [query, setQuery] = useState('');\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   console.log(searchParams);\n\n//   const handleSearchInput = e => {\n//     setQuery(e.target.value)\n\n//   };\n\n//   const handleSearchForm = e => {\n//     e.preventDefault();\n//     if (!query) {\n//       alert('Please enter something to search...');\n//       return;\n//     }\n\n//     const uniqueQuery = `${Date.now()}/${query.toLowerCase().trim()}`;\n//     onSubmit(uniqueQuery);\n//   };\n\n//   return (\n//     <form onSubmit={handleSearchForm}>\n//       <input\n//         name=\"query\"\n//         type=\"text\"\n//         value={query}\n//         onChange={handleSearchInput}\n//         placeholder=\"Search movies\"\n//         autoComplete=\"off\"\n//         autoFocus\n//       />\n//       <button type=\"submit\">Search</button>\n//     </form>\n//   );\n// }\n\n// Searchbar.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport * as moviesAPI from 'services/movies-api';\n\nimport Searchbar from 'components/Searchbar';\nimport MovieList from 'components/MovieList';\nimport Message from 'components/Message';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const queryParams = searchParams.get('query') ?? '';\n\n  const onChange = query => {\n    setSearchParams(query ? { query } : {});\n    setMovies([]);\n    setError(false);\n  };\n\n  useEffect(() => {\n    try {\n      setIsLoading(true);\n\n      const fetchMovies = async query => {\n        const normalizedQuery = query.toLowerCase().trim();\n        const fetchedMovies = await moviesAPI.getMovies(normalizedQuery);\n\n        if (!fetchedMovies.length && normalizedQuery) {\n          alert('No movies found');\n          return;\n        }\n\n        setMovies(fetchedMovies);\n      };\n\n      if (queryParams) fetchMovies(queryParams);\n    } catch (error) {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [queryParams]);\n\n  return (\n    <div>\n      <Searchbar onChange={onChange} value={queryParams} />\n      {movies.length > 0 && <MovieList movies={movies} />}\n      {isLoading && <p>Loading...</p>}\n      {error && (\n        <Message>Oops, something went wrong...Try again later!</Message>\n      )}\n    </div>\n  );\n}\n\n//initial\n// export default function Movies() {\n//   const [query, setQuery] = useState('');\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(false);\n\n//   const handleSearchSubmit = query => {\n//     setQuery(query);\n//     setMovies([]);\n//     setError(false);\n//   };\n\n//   useEffect(() => {\n//     // const controller = new AbortController();\n\n//     try {\n//       setIsLoading(true);\n\n//       const fetchMovies = async query => {\n//         const fetchedMovies = await moviesAPI.getMovies(query);\n//         // const fetchedMovies = await moviesAPI.getMovies(query, controller);\n\n//         if (!fetchedMovies.length && query !== null) {\n//           alert('No movies found');\n//           return;\n//         }\n\n//         setMovies(fetchedMovies);\n//       };\n\n//       if (query) {\n//         const queryToSearch = query.split('/').slice(1).join('');\n//         fetchMovies(queryToSearch);\n//       }\n//     } catch (error) {\n//       // if (error.code !== 'ERR_CANCELED') setError(true);\n//       setError(true);\n//     } finally {\n//       setIsLoading(false);\n//     }\n\n//     // return () => {\n//     //   controller.abort();\n//     // };\n//   }, [query]);\n\n//   return (\n//     <div>\n//       <Searchbar onSubmit={handleSearchSubmit} />\n//       {movies.length > 0 && <MovieList movies={movies} />}\n//       {isLoading && <p>Loading...</p>}\n//       {error && (\n//         <Message>Oops, something went wrong...Try again later!</Message>\n//       )}\n//     </div>\n//   );\n// }\n","import axios from 'axios';\n\nconst options = {\n  params: {\n    api_key: '5c432334b8202e077ccc8c7b5fc7d7ab',\n    language: 'en-US',\n  },\n};\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\nexport async function getTrendingMovies() {\n  const response = await axios.get('/trending/movie/day', options);\n  // console.log(response.data);\n  return response.data.results;\n}\n\n// export async function getTrendingMovies(controller) {\n//   const response = await axios.get('/trending/movie/day', {\n//     ...options,\n//     signal: controller.signal,\n//   });\n//   // console.log(response.data);\n//   return response.data.results;\n// }\n\nexport async function getMovies(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&include_adult=false&page=1`,\n    options\n  );\n  // console.log(response.data);\n  return response.data.results;\n}\n\n// export async function getMovies(query, controller) {\n//   const response = await axios.get(\n//     `/search/movie?query=${query}&include_adult=false&page=1`,\n//     {\n//       ...options,\n//       signal: controller.signal,\n//     }\n//   );\n//   return response.data.results;\n// }\n\n// export async function getMovieDetails(movieId, controller) {\n//   const response = await axios.get(`/movie/${movieId}`, {\n//     ...options,\n//     signal: controller.signal,\n//   });\n//   // console.log(response.data);\n//   return response.data;\n// }\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`/movie/${movieId}`, options);\n  // console.log(response.data);\n  return response.data;\n}\n\nexport async function getMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits`, options);\n  // console.log(response.data);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?page=1`, options);\n  // console.log(response.data);\n  return response.data.results;\n}\n"],"names":["children","movies","path","location","useLocation","map","id","title","to","state","from","value","onChange","name","type","e","target","placeholder","autoComplete","autoFocus","Movies","useState","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","queryParams","get","useEffect","fetchMovies","query","normalizedQuery","toLowerCase","trim","moviesAPI","fetchedMovies","length","alert","MovieList","Message","options","params","api_key","language","getTrendingMovies","axios","response","data","results","getMovies","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}