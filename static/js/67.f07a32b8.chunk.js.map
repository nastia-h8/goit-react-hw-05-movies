{"version":3,"file":"static/js/67.f07a32b8.chunk.js","mappings":"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","sources":["components/Message.jsx","components/MovieList.jsx","components/Searchbar.jsx","pages/Movies.jsx","services/movies-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nfunction Message({ children }) {\n  return <b>{children}</b>;\n}\n\nMessage.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Message;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nfunction MovieList({ movies, path = '' }) {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`${path}${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  path: PropTypes.string,\n};\n\nexport default MovieList;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nfunction Searchbar({ onSubmit, isLoading }) {\n  const [query, setQuery] = useState('');\n\n  const handleInput = e => setQuery(e.target.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!query) {\n      alert('Enter something!');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          name=\"query\"\n          type=\"text\"\n          value={query}\n          onChange={handleInput}\n          placeholder=\"Search movies\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\" disabled={isLoading}>\n          Search\n        </button>\n      </form>\n    </>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport * as moviesAPI from 'services/movies-api';\n\nimport Searchbar from 'components/Searchbar';\nimport MovieList from 'components/MovieList';\nimport Message from 'components/Message';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const queryParams = searchParams.get('query') ?? '';\n\n  const onSubmit = query => {\n    if (query === queryParams) {\n      alert(`You already searching ${query}`);\n      return;\n    }\n\n    setSearchParams(query ? { query } : {});\n    setMovies([]);\n    setError(false);\n  };\n\n  useEffect(() => {\n    const fetchMovies = async query => {\n      try {\n        setIsLoading(true);\n\n        const normalizedQuery = query.toLowerCase().trim();\n        const fetchedMovies = await moviesAPI.getMovies(normalizedQuery);\n\n        if (!fetchedMovies.length && normalizedQuery) {\n          alert('No movies found');\n          return;\n        }\n        setMovies(fetchedMovies);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (queryParams) fetchMovies(queryParams);\n  }, [queryParams]);\n\n  return (\n    <div>\n      <Searchbar\n        onSubmit={onSubmit}\n        value={queryParams}\n        isLoading={isLoading}\n      />\n      {movies.length > 0 && <MovieList movies={movies} />}\n      {isLoading && <p>Loading...</p>}\n      {error && (\n        <Message>Oops, something went wrong...Try again later!</Message>\n      )}\n    </div>\n  );\n}\n\n// with onChange\n// export default function Movies() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(false);\n//   const [searchParams, setSearchParams] = useSearchParams();\n\n//   const queryParams = searchParams.get('query') ?? '';\n\n//   const onChange = query => {\n//     setSearchParams(query ? { query } : {});\n//     setMovies([]);\n//     setError(false);\n//   };\n\n//   useEffect(() => {\n//     try {\n//       setIsLoading(true);\n\n//       const fetchMovies = async query => {\n//         const normalizedQuery = query.toLowerCase().trim();\n//         const fetchedMovies = await moviesAPI.getMovies(normalizedQuery);\n\n//         if (!fetchedMovies.length && normalizedQuery) {\n//           alert('No movies found');\n//           return;\n//         }\n\n//         setMovies(fetchedMovies);\n//       };\n\n//       if (queryParams) fetchMovies(queryParams);\n//     } catch (error) {\n//       setError(true);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   }, [queryParams]);\n\n//   return (\n//     <div>\n//       <Searchbar onChange={onChange} value={queryParams} />\n//       {movies.length > 0 && <MovieList movies={movies} />}\n//       {isLoading && <p>Loading...</p>}\n//       {error && (\n//         <Message>Oops, something went wrong...Try again later!</Message>\n//       )}\n//     </div>\n//   );\n// }\n","import axios from 'axios';\n\nconst options = {\n  params: {\n    api_key: '5c432334b8202e077ccc8c7b5fc7d7ab',\n    language: 'en-US',\n  },\n};\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function getTrendingMovies() {\n  const response = await axios.get('/trending/movie/day', options);\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovies(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&include_adult=false&page=1`,\n    options\n  );\n\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`/movie/${movieId}`, options);\n  // console.log(response.data);\n  return response.data;\n}\n\nexport async function getMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits`, options);\n\n  // console.log(response.data);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?page=1`, options);\n\n  // console.log(response.data);\n  return response.data.results;\n}\n"],"names":["children","movies","path","location","useLocation","map","id","title","to","state","from","onSubmit","isLoading","useState","query","setQuery","e","preventDefault","alert","name","type","value","onChange","target","placeholder","autoComplete","autoFocus","disabled","Movies","setMovies","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","queryParams","get","useEffect","fetchMovies","normalizedQuery","toLowerCase","trim","moviesAPI","fetchedMovies","length","MovieList","Message","options","params","api_key","language","getTrendingMovies","axios","response","data","results","getMovies","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}