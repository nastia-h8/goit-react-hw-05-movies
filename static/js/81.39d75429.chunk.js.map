{"version":3,"file":"static/js/81.39d75429.chunk.js","mappings":"mSAEaA,EAAOC,EAAAA,GAAAA,GAAH,mLAQJC,EAAOD,EAAAA,GAAAA,GAAH,gEAKJE,EAAUF,EAAAA,GAAAA,IAAH,2VAkBPG,EAAOH,EAAAA,GAAAA,EAAH,oEAKJI,EAAYJ,EAAAA,GAAAA,EAAH,uC,SCCtB,MAnCA,YAA6B,IAATK,EAAQ,EAARA,KAClB,OACE,SAACN,EAAD,UACGM,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAACT,EAAD,YACE,gBACEU,IACED,EAAY,0CAC2BA,GAD3B,UAELE,GAETC,IAAKL,EACLM,MAAM,SAER,UAACZ,EAAD,YACE,SAACC,EAAD,UAAOK,KACP,SAACJ,EAAD,UAAYK,SAZLF,EADH,KAmBf,E,6BChBc,SAASQ,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOb,EAAP,KAAac,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IACEH,GAAa,GAEb,IAAMI,EAAc,mCAAG,WAAMT,GAAN,uFACKU,EAAAA,GAAuBV,GAD5B,OACfW,EADe,OAErBR,EAAQQ,GAFa,2CAAH,sDAKpBF,EAAeT,EAKhB,CAJC,MAAOM,GACPC,GAAS,EACV,CAXD,QAYEF,GAAa,EACd,CACF,GAAE,CAACL,KAGF,gCACGX,EAAKuB,OAAS,GACb,SAAC,EAAD,CAAUvB,KAAMA,KAEhB,SAACwB,EAAA,EAAD,+BAGDT,IAAa,SAACU,EAAA,EAAD,IACbR,IAAS,SAACS,EAAA,EAAD,MAGf,C,sEC3CYC,E,QAAOhC,GAAAA,KAAH,mE,SCIjB,MAJA,WACE,OAAO,SAACgC,EAAD,2DACR,C,oCCED,IAJA,YAAoC,IAAbC,EAAY,EAAZA,SACrB,OAAO,uBAAIA,GACZ,C,mMCFKC,EAAU,CACdC,OAAQ,CACNC,QAAS,mCACTC,SAAU,UAMP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAU,sBAAuBL,GADnD,cACCM,EADD,yBAGEA,EAASC,KAAKC,SAHhB,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,uFACkBL,EAAAA,EAAAA,IAAA,8BACEK,EADF,+BAErBV,GAHG,cACCM,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+B7B,GAA/B,uFACkBuB,EAAAA,EAAAA,IAAA,iBAAoBvB,GAAWkB,GADjD,cACCM,EADD,OAELM,QAAQC,IAAIP,EAASC,MAFhB,kBAGED,EAASC,MAHX,kEAMA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA4BhC,GAA5B,uFACkBuB,EAAAA,EAAAA,IAAA,iBAAoBvB,EAApB,YAAuCkB,GADzD,cACCM,EADD,yBAIEA,EAASC,KAAKpC,MAJhB,kEAOA,SAAe4C,EAAtB,+CAAO,OAAP,oBAAO,WAA+BjC,GAA/B,uFACkBuB,EAAAA,EAAAA,IAAA,gBAAmBvB,EAAnB,mBAA6CkB,GAD/D,cACCM,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEA/BPH,EAAAA,EAAAA,SAAAA,QAAA,8B","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast.jsx","components/Message/Message.styled.js","components/Message/ErrorMessage.jsx","components/Message/InfoMessage.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 12px;\n  margin: 0 auto;\n`;\n\nexport const Item = styled.li`\n  position: relative;\n  width: 200px;\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  min-height: 50px;\n\n  font-size: 12px;\n  line-height: 1.14;\n  letter-spacing: 0.03em;\n\n  color: #fff;\n  background-color: rgba(47, 48, 58, 0.8);\n  transform: translateY(-100%);\n`;\n\nexport const Name = styled.p`\n  margin-bottom: 8px;\n  font-weight: 700;\n`;\n\nexport const Character = styled.p`\n  span {\n  }\n`;\n","import PropTypes from 'prop-types';\nimport placeholder from '../../images/placeholder.jpg';\nimport { List, Item, Overlay, Character, Name } from './CastList.styled';\n\nfunction CastList({ cast }) {\n  return (\n    <List>\n      {cast.map(({ id, name, character, profile_path }) => (\n        <Item key={id}>\n          <img\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                : `${placeholder}`\n            }\n            alt={name}\n            width=\"200\"\n          />\n          <Overlay>\n            <Name>{name}</Name>\n            <Character>{character}</Character>\n          </Overlay>\n        </Item>\n      ))}\n    </List>\n  );\n}\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport * as moviesAPI from 'services/movies-api';\n\nimport CastList from './CastList/CastList';\nimport Loader from './Loader';\nimport ErrorMessage from './Message/ErrorMessage';\nimport InfoMessage from './Message/InfoMessage';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    try {\n      setIsLoading(true);\n\n      const fetchMovieCast = async movieId => {\n        const fetchedCast = await moviesAPI.getMovieCast(movieId);\n        setCast(fetchedCast);\n      };\n\n      fetchMovieCast(movieId);\n    } catch (error) {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length > 0 ? (\n        <CastList cast={cast} />\n      ) : (\n        <InfoMessage>No cast added...</InfoMessage>\n      )}\n\n      {isLoading && <Loader />}\n      {error && <ErrorMessage />}\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Text = styled.span`\n  font-size: 20px;\n  text-align: center;\n`;\n","import { Text } from './Message.styled';\n\nfunction ErrorMessage() {\n  return <Text>Oops, something went wrong...Try again later!</Text>;\n}\n\nexport default ErrorMessage;\n","import PropTypes from 'prop-types';\n\nfunction InfoMessage({ children }) {\n  return <p>{children}</p>;\n}\n\nexport default InfoMessage;\n\nInfoMessage.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import axios from 'axios';\n\nconst options = {\n  params: {\n    api_key: '5c432334b8202e077ccc8c7b5fc7d7ab',\n    language: 'en-US',\n  },\n};\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function getTrendingMovies() {\n  const response = await axios.get('/trending/movie/day', options);\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovies(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&include_adult=false&page=1`,\n    options\n  );\n\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`/movie/${movieId}`, options);\n  console.log(response.data);\n  return response.data;\n}\n\nexport async function getMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits`, options);\n\n  // console.log(response.data);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?page=1`, options);\n\n  // console.log(response.data);\n  return response.data.results;\n}\n"],"names":["List","styled","Item","Overlay","Name","Character","cast","map","id","name","character","profile_path","src","placeholder","alt","width","Cast","movieId","useParams","useState","setCast","isLoading","setIsLoading","error","setError","useEffect","fetchMovieCast","moviesAPI","fetchedCast","length","InfoMessage","Loader","ErrorMessage","Text","children","options","params","api_key","language","getTrendingMovies","axios","response","data","results","getMovies","query","getMovieDetails","console","log","getMovieCast","getMovieReviews"],"sourceRoot":""}