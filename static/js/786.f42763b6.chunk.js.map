{"version":3,"file":"static/js/786.f42763b6.chunk.js","mappings":"wQAmCA,MAhCA,YAA6B,IAATA,EAAQ,EAARA,KAClB,OACE,wBACGA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,2BACE,gBACEC,IACED,EAAY,0CAC2BA,GAD3B,UAELE,GAETC,IAAKL,KAEP,uBAAIA,KACJ,uCAAeC,OAVRF,EADD,KAgBf,E,SCbc,SAASO,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IACEH,GAAa,GAEb,IAAMI,EAAc,mCAAG,WAAMT,GAAN,uFACKU,EAAAA,GAAuBV,GAD5B,OACfW,EADe,OAErBR,EAAQQ,GAFa,2CAAH,sDAKpBF,EAAeT,EAKhB,CAJC,MAAOM,GACPC,GAAS,EACV,CAXD,QAYEF,GAAa,EACd,CACF,GAAE,CAACL,KAGF,gCACGV,EAAKsB,OAAS,GACb,SAAC,EAAD,CAAUtB,KAAMA,KAEhB,SAACuB,EAAA,EAAD,+BAGDT,IAAa,sCAEbE,IACC,SAACO,EAAA,EAAD,8DAIP,C,mCCrCD,IARA,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OAAO,uBAAIA,GACZ,C,+LCFKC,EAAU,CACdC,OAAQ,CACNC,QAAS,mCACTC,SAAU,UAMP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAU,sBAAuBL,GADnD,cACCM,EADD,yBAGEA,EAASC,KAAKC,SAHhB,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,uFACkBL,EAAAA,EAAAA,IAAA,8BACEK,EADF,+BAErBV,GAHG,cACCM,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+B1B,GAA/B,uFACkBoB,EAAAA,EAAAA,IAAA,iBAAoBpB,GAAWe,GADjD,cACCM,EADD,yBAGEA,EAASC,MAHX,kEAMA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4B3B,GAA5B,uFACkBoB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,YAAuCe,GADzD,cACCM,EADD,yBAIEA,EAASC,KAAKhC,MAJhB,kEAOA,SAAesC,EAAtB,+CAAO,OAAP,oBAAO,WAA+B5B,GAA/B,uFACkBoB,EAAAA,EAAAA,IAAA,gBAAmBpB,EAAnB,mBAA6Ce,GAD/D,cACCM,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEA/BPH,EAAAA,EAAAA,SAAAA,QAAA,8B","sources":["components/CastList.jsx","components/Cast.jsx","components/Message.jsx","services/movies-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport placeholder from '../images/placeholder.jpg';\n\nfunction CastList({ cast }) {\n  return (\n    <ul>\n      {cast.map(({ id, name, character, profile_path }) => (\n        <li key={id}>\n          <img\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                : `${placeholder}`\n            }\n            alt={name}\n          />\n          <p>{name}</p>\n          <p>Character: {character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport * as moviesAPI from 'services/movies-api';\n\nimport CastList from './CastList';\nimport Message from './Message';\nimport React from 'react';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    try {\n      setIsLoading(true);\n\n      const fetchMovieCast = async movieId => {\n        const fetchedCast = await moviesAPI.getMovieCast(movieId);\n        setCast(fetchedCast);\n      };\n\n      fetchMovieCast(movieId);\n    } catch (error) {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length > 0 ? (\n        <CastList cast={cast} />\n      ) : (\n        <Message>No cast added...</Message>\n      )}\n\n      {isLoading && <p>Loading...</p>}\n\n      {error && (\n        <Message>Oops, something went wrong...Try again later!</Message>\n      )}\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\n\nfunction Message({ children }) {\n  return <b>{children}</b>;\n}\n\nMessage.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Message;\n","import axios from 'axios';\n\nconst options = {\n  params: {\n    api_key: '5c432334b8202e077ccc8c7b5fc7d7ab',\n    language: 'en-US',\n  },\n};\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function getTrendingMovies() {\n  const response = await axios.get('/trending/movie/day', options);\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovies(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&include_adult=false&page=1`,\n    options\n  );\n\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`/movie/${movieId}`, options);\n  // console.log(response.data);\n  return response.data;\n}\n\nexport async function getMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits`, options);\n\n  // console.log(response.data);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?page=1`, options);\n\n  // console.log(response.data);\n  return response.data.results;\n}\n"],"names":["cast","map","id","name","character","profile_path","src","placeholder","alt","Cast","movieId","useParams","useState","setCast","isLoading","setIsLoading","error","setError","useEffect","fetchMovieCast","moviesAPI","fetchedCast","length","Message","children","options","params","api_key","language","getTrendingMovies","axios","response","data","results","getMovies","query","getMovieDetails","getMovieCast","getMovieReviews"],"sourceRoot":""}