{"version":3,"file":"static/js/946.9e6cfb51.chunk.js","mappings":"sNAGaA,EAAOC,EAAAA,GAAAA,GAAH,0GAOJC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,ujB,mBCsBvB,MA3BA,YAA2C,IAAtBG,EAAqB,EAArBA,OAAqB,IAAbC,KAAAA,OAAa,MAAN,GAAM,EAClCC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGI,EAAOI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,UAACR,EAAD,CAAYS,GAAE,UAAKN,GAAL,OAAYI,GAAMG,MAAO,CAAEC,KAAMP,GAA/C,WACE,SAAC,MAAD,CAAkBQ,KAAM,MACxB,0BAAOJ,QAHFD,EADC,KAUjB,C,iKCnBYM,E,QAAYd,GAAAA,IAAH,0I,SCOP,SAASe,IACtB,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,oGAExBJ,GAAa,GAFW,SAIIK,EAAAA,KAJJ,OAIlBC,EAJkB,OAKxBR,EAAkBQ,GALM,gDAOxBJ,GAAS,GAPe,yBASxBF,GAAa,GATW,4EAAH,qDAYzBI,GACD,GAAE,KAGD,UAACV,EAAD,YACE,2CACCK,IAAa,SAACQ,EAAA,EAAD,IACbN,IAAS,yEACTJ,EAAeW,OAAS,IACvB,SAACC,EAAA,EAAD,CAAW1B,OAAQc,EAAgBb,KAAK,cAI/C,C,mMCrCK0B,EAAU,CACdC,OAAQ,CACNC,QAAS,mCACTC,SAAU,UAMP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAU,sBAAuBL,GADnD,cACCM,EADD,yBAGEA,EAASC,KAAKC,SAHhB,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,uFACkBL,EAAAA,EAAAA,IAAA,8BACEK,EADF,+BAErBV,GAHG,cACCM,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBP,EAAAA,EAAAA,IAAA,iBAAoBO,GAAWZ,GADjD,cACCM,EADD,OAELO,QAAQC,IAAIR,EAASC,MAFhB,kBAGED,EAASC,MAHX,kEAMA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA4BH,GAA5B,uFACkBP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,YAAuCZ,GADzD,cACCM,EADD,yBAIEA,EAASC,KAAKS,MAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BL,GAA/B,uFACkBP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,mBAA6CZ,GAD/D,cACCM,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEA/BPH,EAAAA,EAAAA,SAAAA,QAAA,8B","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home.styled.js","pages/Home.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const StyledLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  text-decoration: none;\n  color: inherit;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.14;\n  letter-spacing: 0.03em;\n\n  &:hover,\n  &:focus {\n    color: rgba(0, 209, 255, 1);\n  }\n\n  svg {\n    fill: rgba(0, 209, 255, 1);\n  }\n\n  transition: all 250ms linear;\n\n  /* padding-left: 28px; */\n  /* &::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    width: 20px;\n    height: 20px;\n    color: tomato;\n    background-color: tomato;\n  } */\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, StyledLink } from './MovieList.styled';\nimport { AiFillPlayCircle } from 'react-icons/ai';\n\nfunction MovieList({ movies, path = '' }) {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <StyledLink to={`${path}${id}`} state={{ from: location }}>\n            <AiFillPlayCircle size={20} />\n            <span>{title}</span>\n          </StyledLink>\n        </li>\n      ))}\n    </List>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  path: PropTypes.string,\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\nexport const Container = styled.div`\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n`;\n","import { useEffect, useState } from 'react';\n\nimport * as moviesAPI from 'services/movies-api';\n\nimport MovieList from 'components/MovieList/MovieList';\nimport Loader from 'components/Loader';\nimport { Container } from './Home.styled';\n\nexport default function Home() {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchTrendingMovies = async () => {\n      try {\n        setIsLoading(true);\n\n        const fetchedMovies = await moviesAPI.getTrendingMovies();\n        setTrendingMovies(fetchedMovies);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrendingMovies();\n  }, []);\n\n  return (\n    <Container>\n      <h1>Trending today</h1>\n      {isLoading && <Loader />}\n      {error && <p>Oops, something went wrong...Try again later!</p>}\n      {trendingMovies.length > 0 && (\n        <MovieList movies={trendingMovies} path=\"movies/\" />\n      )}\n    </Container>\n  );\n}\n","import axios from 'axios';\n\nconst options = {\n  params: {\n    api_key: '5c432334b8202e077ccc8c7b5fc7d7ab',\n    language: 'en-US',\n  },\n};\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function getTrendingMovies() {\n  const response = await axios.get('/trending/movie/day', options);\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovies(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&include_adult=false&page=1`,\n    options\n  );\n\n  // console.log(response.data);\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`/movie/${movieId}`, options);\n  console.log(response.data);\n  return response.data;\n}\n\nexport async function getMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits`, options);\n\n  // console.log(response.data);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?page=1`, options);\n\n  // console.log(response.data);\n  return response.data.results;\n}\n"],"names":["List","styled","StyledLink","Link","movies","path","location","useLocation","map","id","title","to","state","from","size","Container","Home","useState","trendingMovies","setTrendingMovies","isLoading","setIsLoading","error","setError","useEffect","fetchTrendingMovies","moviesAPI","fetchedMovies","Loader","length","MovieList","options","params","api_key","language","getTrendingMovies","axios","response","data","results","getMovies","query","getMovieDetails","movieId","console","log","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}